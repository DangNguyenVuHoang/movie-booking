// src/pages/admin/ManageUser.jsx
import { useEffect, useState } from "react";
import {
  Table,
  Button,
  Space,
  Popconfirm,
  message,
  Modal,
  Form,
  Input,
  Select,
} from "antd";
import userApi from "../../api/userApi";

export default function ManageUser() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);

  // üìå State cho modal edit
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [form] = Form.useForm();

  // üìå L·∫•y danh s√°ch user
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const res = await userApi.getUsers();
      setUsers(res?.content || []); // Cybersoft API tr·∫£ v·ªÅ { content: [...] }
    } catch (err) {
      message.error("‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // üìå Xo√° user
  const handleDelete = async (taiKhoan) => {
    try {
      await userApi.deleteUser(taiKhoan);
      message.success("‚úÖ X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng");
      fetchUsers();
    } catch (err) {
      const errorMsg = `${err?.message || "L·ªói"} - ${err?.response?.data?.content || ""}`;
      message.error(errorMsg);
      console.error("Delete error:", err);
    }
  };

  // üìå B·∫•m n√∫t s·ª≠a
  const handleEdit = (user) => {
    setEditingUser(user);
    form.setFieldsValue(user); // Load d·ªØ li·ªáu user v√†o form
    setIsModalOpen(true);
  };

 // üìå C·∫≠p nh·∫≠t user
const handleUpdate = async () => {
  try {
    const values = await form.validateFields();

    // Map d·ªØ li·ªáu ƒë√∫ng v·ªõi API
    const payload = {
      taiKhoan: values.taiKhoan,
      matKhau: values.matKhau,
      email: values.email,
      soDt: values.soDT, // üõ† map ƒë√∫ng key
      maNhom: "GP05", // ho·∫∑c "GP00", tu·ª≥ nh√≥m b·∫°n d√πng
      maLoaiNguoiDung: values.maLoaiNguoiDung,
      hoTen: values.hoTen,
    };

    console.log("üì§ Payload g·ª≠i ƒëi:", payload); // üëâ ki·ªÉm tra log

    await userApi.updateUser(payload);
    message.success("‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng");
    setIsModalOpen(false);
    fetchUsers();
  } catch (err) {
    const errorMsg =
      err?.response?.data?.content ||
      err?.message ||
      "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!";
    message.error(errorMsg);
    console.error("Update error:", err);
  }
};

  const columns = [
    { title: "T√†i kho·∫£n", dataIndex: "taiKhoan", key: "taiKhoan" },
    { title: "H·ªç t√™n", dataIndex: "hoTen", key: "hoTen" },
    { title: "Email", dataIndex: "email", key: "email" },
    { title: "SƒêT", dataIndex: "soDT", key: "soDT" },
    {
      title: "Lo·∫°i ng∆∞·ªùi d√πng",
      dataIndex: "maLoaiNguoiDung",
      key: "maLoaiNguoiDung",
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button type="primary" onClick={() => handleEdit(record)}>
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi d√πng n√†y?"
            okText="Xo√°"
            cancelText="H·ªßy"
            onConfirm={() => handleDelete(record.taiKhoan)}
          >
            <Button danger>Xo√°</Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
      <Table
        rowKey="taiKhoan"
        columns={columns}
        dataSource={users}
        loading={loading}
        pagination={{ pageSize: 8 }}
      />

      {/* Modal Edit User */}
      <Modal
        title="‚úèÔ∏è S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng"
        open={isModalOpen}
        onOk={handleUpdate}
        onCancel={() => setIsModalOpen(false)}
        okText="C·∫≠p nh·∫≠t"
        cancelText="H·ªßy"
      >
        <Form form={form} layout="vertical">
          <Form.Item name="taiKhoan" label="T√†i kho·∫£n">
            <Input disabled />
          </Form.Item>
          <Form.Item
            name="hoTen"
            label="H·ªç t√™n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
            ]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="soDT"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="maLoaiNguoiDung"
            label="Lo·∫°i ng∆∞·ªùi d√πng"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i ng∆∞·ªùi d√πng" }]}
          >
            <Select>
              <Select.Option value="KhachHang">Kh√°ch h√†ng</Select.Option>
              <Select.Option value="QuanTri">Qu·∫£n tr·ªã</Select.Option>
            </Select>
          </Form.Item>
          <Form.Item
            name="matKhau"
            label="M·∫≠t kh·∫©u"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
          >
            <Input.Password />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
